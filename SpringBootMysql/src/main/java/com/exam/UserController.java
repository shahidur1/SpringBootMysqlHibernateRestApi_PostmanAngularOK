package com.exam;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@CrossOrigin(origins = "http://localhost:4200")
@Controller // This means that this class is a Controller
@RequestMapping(path = "/api") // This means URL's start with /demo (after Application path)
public class UserController {
	// This means to get the bean called userService
// Which is auto-generated by Spring, we will use it to handle the data

	@Autowired
	private UserService userService;

	@PostMapping(path = "/users") // Map ONLY POST Requests
	public @ResponseBody String seveUser(@RequestParam String name, @RequestParam String email) {
		String status = userService.seveUser(name, email);
		return status;
	}

	// @GetMapping(path = "/users")
	@RequestMapping(method = RequestMethod.GET, value = "/users", produces = { "application/json"})
	// public @ResponseBody Iterable<User> findAllUsers() {
	public @ResponseBody List<User> findAllUsers() {
		// This returns a JSON or XML with the users
		// Iterable<User> users = userService.findAllUsers();
		List<User> users = userService.findAllUsers();
		return users;
	}

	@RequestMapping("/users/{id}")
	public @ResponseBody User findUserById(@PathVariable String id) {
		Integer userId = Integer.parseInt(id);
		User user = userService.findUserById(userId);
		return user;
	}

	@DeleteMapping("/users/{id}")
	public @ResponseBody String deleteUser(@PathVariable String id) {
		Integer userId = Integer.parseInt(id);
		userService.deleteUser(userId);
		return "Deleted";
	}

	@PutMapping("/users/{id}")
	public @ResponseBody User updateUser(@RequestParam String name, @RequestParam String email,
			@PathVariable String id) {
		Integer userId = Integer.parseInt(id);
		User u = userService.updateUser(new User(userId, name, email));
		return u;
	}

}

/*
 * @Autowired private TopicService topicService;
 * 
 * @RequestMapping("/topics") public List<Topic> getAllTopics() { return
 * topicService.getAllTopics(); }
 * 
 * @RequestMapping("/topics/{id}") public Topic getTopicById(@PathVariable
 * String id) { return topicService.getTopic(id); }
 * 
 * @RequestMapping(method = RequestMethod.POST, value = "/topics") public Topic
 * addTopic(@RequestBody Topic topic) { Topic t = topicService.addTopic(topic);
 * return t; }
 * 
 * @RequestMapping(method = RequestMethod.PUT, value = "/topics/{id}") public
 * Topic updateTopic(@RequestBody Topic topic,@PathVariable String id) { Topic t
 * = topicService.updateTopic(id,topic); return t; }
 * 
 * @RequestMapping(method = RequestMethod.DELETE, value = "/topics/{id}") public
 * Topic deleteTopic(@PathVariable String id) { return
 * topicService.deleteTopic(id); }
 * 
 * 
 */