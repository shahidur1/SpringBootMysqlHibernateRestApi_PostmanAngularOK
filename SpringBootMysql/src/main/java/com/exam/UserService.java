package com.exam;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Service
public class UserService {
	// This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	@Autowired 
	private UserRepository userRepository;
	public @ResponseBody String seveUser( String name, String email) {		
		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "saved";
	}
	
	//public @ResponseBody Iterable<User> findAllUsers() {
		public @ResponseBody List<User> findAllUsers() {
		
		// This returns a JSON or XML with the users
		//Iterable<User> users= userRepository.findAll();
		List<User> users = (List<User>) userRepository.findAll();
		return users;
	}
	
	public @ResponseBody User findUserById(Integer id) {
		User user = userRepository.findById(id).get();
		return user;
	}
	
	public @ResponseBody String deleteUser(Integer id) {
		userRepository.deleteById(id);
		return "Deleted";
	}
	
	public @ResponseBody User updateUser(User user) {
		userRepository.save(user);
		User u = userRepository.findById(user.getId()).get();
		return u;
	}
}


/*
 * 
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.stereotype.Service;

@Service
public class TopicService {
	private List<Topic> topics = new ArrayList<>( Arrays.asList(new Topic("spring", "Spring Framework", "Spring Boot"),
			new Topic("java", "core Jave", "core java description"),
			new Topic("javascript", "core Javascript", "Javascript description")
			));

	public List<Topic> getAllTopics() {
		return topics;
	}
	public Topic getTopic(String id) {
		Topic topic = topics.stream().filter(t->t.getId().equals(id)).findFirst().get();
		return topic;
	}
	public Topic addTopic(Topic topic) {
		topics.add(topic);
		return topic;
		
	}
	public Topic updateTopic(String id, Topic topic) {
		Topic ret=null;;
		for(int i =0;i<topics.size();i++) {
			Topic t =topics.get(i);
			if(t.getId().equals(id)) {
				topics.set(i, topic);	
				ret=topic;
				return ret;
			}else {
				ret=t;
			}
		}
	return ret;
	}
	
//	public void deleteTopic(String id) {
//		//topics.removeIf(t->t.getId().equals(id));
//	}
	
	
	public Topic deleteTopic(String id) {
		//topics.removeIf(t->t.getId().equals(id));
		Topic ret=null;;
		for(int i =0;i<topics.size();i++) {
			Topic t =topics.get(i);
			if(t.getId().equals(id)) {
				ret = topics.get(i);
				topics.remove(i);			
				return ret;
			}else {
				
			}
		}
	return ret;
	}
} 

 */